Please Read The Chapters on: 
Containers, Blocks, and Iterators 
Sharing Functionality: Inheritance, Modules, and Mixins


1. What is the difference between a Hash and an Array?

- A hash associates keys with values. Hashes can use any object as an index (key).
- An array is an ordered collection of objects, indexed by a positive integer (starting at zero).
- You could make a hash act like an array by providing integers for the keys.




2. When would you use an Array over a Hash and vice versa?

- Use an array when order matters. Although Ruby remembers what order you added the key-value pairs to a Hash object.
- Hashes can use any object as an index.
- If you want to have a default return value, you should use a hash. You can specify a default value to return when you ask for the value for a nonexistent key. For example you could have it return 0 or "N/A" depending on your needs.




3. What is a module? Enumerable is a built in Ruby module, what is it?

A module is a namespaced grouping of classes, methods, and constants. The namespacing helps prevent naming colisions. They allow for mixins, which is a way of adding functionality without having to subclass. A module's instance methods (alhtough a module is not really an instance) are automatically added to classes that include the module.

Enumerable is a module that gives classes that mix it in the `map` and `include?` methods among others. All you have to do is write an `each` method that returns all elements in your collection. If you write a `<==>` method that returns ordering information, Enumerable also gives you `max`, `min`, and `sort`. It gives you a bunch of methods that rely on the `each` and `<==>` methods.



4. Can you inherit more than one thing in Ruby? How could you get around this problem?

No. Ruby is a single inheritance language. You can use module mixins to add extra functionality to your classes.



5. What is the difference between a Module and a Class?

You don't create instances of a module. You just use its methods.
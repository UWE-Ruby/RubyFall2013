Please Read The Chapters on: 
Containers, Blocks, and Iterators 
Sharing Functionality: Inheritance, Modules, and Mixins

1. What is the difference between a Hash and an Array?
An array is an ordered list of items that are referenced by their index (order), a hash is a collection of items that can be referenced by a key and have no order.

* Both have keys and values. The keys in an array must be integers and 
must be sequential starting at 0. The keys in a hash can be any 
object. Hashes are also called associative arrays and/or dictionaries

2. When would you use an Array over a Hash and vice versa?
When the items have an inherent order I would use an array, when I want to reference the items in my collection by a name or key and their order does not matter I would use a hash.

* Arrays are great for storing things in a particular order; 
a hash is great for retrieving things based on something
other than order. If you don't know the position of an 
element in an array, but you know the name of an element,
you still have to enumerate through all of the elements to find 
a particular element with an array. You can only locate an element by
position with an array. With a hash, you could retrieve the 
desired element using the name, instead of the position index. The reason you
can do this is that a hash accepts any object as a key, unlike an array that
only accepts an integer representing an's elements position in the array.

3. What is a module? Enumerable is a built in Ruby module, what is it?
A module is a way to group code that you can use across multiple classes. Enumerable is a Ruby module that provides collection functionality; iteration, searching, and sorting. It requires an implementation of the each method.

* A module allows you to organize code into namespaces. It also
allows classes to mixin code rather than inherit code.

4. Can you inherit more than one thing in Ruby? How could you get around this problem?
No, multiple inheritance is not allowed in Ruby. You can include multiple modules if you wanted to mix-in different functionality into your code. Code that is related with a hierarchical nature should be subclassed (inherited). A class can only have 1 direct parent, but can have lots of ancestors.

* No. You use modules. If you could inherit from more than one class you would
have the diamond problem. If a class inherited from two classes that both defined a method named
hello(), which superclass's method would be called if you called hello() on the child class? 
Modules allow you to re-use code without inheritance which circumvents the problem
of multiple inheritance.

5. What is the difference between a Module and a Class?
<<<<<<< HEAD

* "Classes are about objects; modules are about functions." (stole this from StackOverflow)
* You can't inherit from a module
* You can't instantiate a module
* Modules can't have variables, but both modules and classes can have constants and methods
* Modules can add instance methods to a class
* You use modules for mixins and classes for inheritance and/or instantiation 
* Modules let you create namespaces
* Modules are like libraries in that you can use across multiple classes
=======
A class can be instantiated into an object, a module cannot. A module is code that can be used across many classes.
>>>>>>> 02ccc7d94fdfc30a6d2d7e93c8bee3f07a3da618
